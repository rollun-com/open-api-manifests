openapi: 3.0.0
info:
  version: "1"
  title: "CRMEventHandler"
  description: "A manifest that enables services to be notified after an action is performed in the CRM, with the possibility of receiving additional actions to execute.
                It is typically used in two scenarios:
                    1. When an action has been completed in the CRM.
                    2. When a direct command needs to be executed by the receiving service, for example run a scenario by 'scenario_id' specified in the action body."
servers:
  - url: http://rollun-crm/openapi/CRMEventHandler/v1
  - url: https://crm-node-red.rollun.net/openapi/CRMEventHandler/v1
  - url: https://rollun.net/api/openapi/CRMEventHandler/v1
tags:
  - name: Event
paths:
  "/eventHandler":
    post:
      tags:
        - Event
      description: "An endpoint that receives information about an executed action and returns any additional actions that need to be performed."
      requestBody:
        description: "The request includes information about the entity and the action performed on it."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPostRequest'
      responses:
        "200":
          description: "In case of success, additional actions may be returned; otherwise, an empty array is provided if no further actions are needed."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionsResponse'
        "500":
          description: "A response containing messages about any errors that occurred."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ## General
    Message:
      type: object
      properties:
        level:
          type: string
          enum:
            - emergency
            - alert
            - critical
            - error
            - warning
            - notice
            - info
        text:
          type: string
          description: Message, that describes what went wrong
    ErrorResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
      description: "Message field is not required"
    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      type: object
      required:
        - data
      properties:
        data:
          type: object

    ## Custom responses
    ActionsResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ActionWithEntity"

    ActionWithEntity:
      type: object
      required:
        - action
        - entity
      properties:
        action:
          $ref: '#/components/schemas/Action'
        entity:
          $ref: '#/components/schemas/ActionEntity'

    ## Custom requests
    EventPostRequest:
      type: object
      required:
        - lifecycleToken
        - entity
        - action
      properties:
        lifecycleToken:
          type: string
        entity:
          $ref: '#/components/schemas/EventEntity'
        action:
          $ref: '#/components/schemas/CompletedAction'

    ## Resources
    CompletedAction:
      allOf:
        - $ref: '#/components/schemas/Action'
      properties:
        startedAt:
          type: string
          example: '2022-09-22 21:53:10'
          description: mysql date-time

    Action:
      type: object
      required:
        - type
        - context
      properties:
        type:
          type: string
          enum:
            - create
            - update
            - delete
            - scenario_request
            - megaplan_request
            - remote_request
            - button
        context:
          type: object
          description: "Changes requested to be performed during this action, such as updating specific fields or executing a scenario by its ID.
                        In a CompletedAction, this field usually retains the same value as in the original Action."
          additionalProperties: true
        delay:
          type: integer
          minimum: 0

    EventEntity:
      allOf:
        - $ref: '#/components/schemas/Entity'
      required:
        - row
      properties:
        row:
          type: object
          description: "All fields of the entity after the action has been performed, reflecting updated values.
                        Note: This property is not logged in the ActionsHistoryDataStore."
          additionalProperties: true
        changedFields:
          type: object
          description: "Previous values of the fields that were changed during action execution."
          additionalProperties: true

    ActionEntity:
      allOf:
        - $ref: '#/components/schemas/Entity'
      required:
        - rowId
      properties:
        rowId:
          type: string

    Entity:
      type: object
      required:
        - type
        - name
      properties:
        type:
          type: string
        name:
          type: string