openapi: "3.0.0"
info:
  description: "Returns module"
  version: "3"
  title: "ReturnsModule"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "http://megaplan-crm/openapi/ReturnsModule/v3"
  - url: "https://rollun.net/api/openapi/ReturnsModule/v3"
tags:
  - name: Locations
    description: "Locations"
  - name: Storages
    description: "Storages"
  - name: Products
    description: "Candidates"
  - name: Returns
    description: "Returns"
paths:
  /locations:
    get:
      tags:
        - Locations
      description: ""
      responses:
        "200":
          description: "successful operation"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/LocationCollectionResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /storages:
    get:
      tags:
        - Storages
      description: "successful operation"
      responses:
        "200":
          description: "successful"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/StoragesCollectionResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products:
    get:
      tags:
        - Products
      description: ""
      parameters:
        - in: query
          name: storage
          required: true
          description: Storage
          schema:
            type: string
        - in: query
          name: pageNumber
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: includeEmpty
          description: If true, result set will include items with empty candidates array. Default true
          schema:
            type: boolean
      responses:
        "200":
          description: "successful operation"
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/ProductCollectionResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /returns:
    post:
      tags:
        - Returns
      summary: "Select candidates for products"
      description: ""
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnPostRequest'
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnPostResponse'
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 'Some internal error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:

    #### GENERAL ###
    ErrorResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Message:
      type: object
      required:
        - level
        - text
      properties:
        level:
          type: string
          description: 'Message level  (like in a logger)'
          example: 'error'
        text:
          type: string
          description: 'Message text'
          example: 'Something wrong.'
        context:
          type: array
          description: 'Message context (like in a logger)'
          items:
            type: string
    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      type: object
      properties:
        data:
          type: object
    CollectionResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessResponse"
        - $ref: "#/components/schemas/PaginatedMetaResponse"
      type: object
    PaginatedMetaResponse:
      properties:
        meta:
          $ref: "#/components/schemas/PaginatedMeta"
    PaginatedMeta:
      type: object
      properties:
        pageNumber:
          type: integer
        pageSize:
          type: integer
        totalPages:
          type: integer
    Result:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
    Relationship:
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
    Include:
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
    Links:
      type: object
      properties:
        self:
          type: string
        first:
          type: string
        prev:
          type: string
        next:
          type: string
        last:
          type: string

    ### CUSTOM ###
    ProductCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/CollectionResponse'
        #- $ref: "#/components/schemas/PaginatedMetaResponse"
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductResultItem"
        included:
          type: array
          items:
            $ref: "#/components/schemas/DealInclude"
    ProductResultItem:
      allOf:
        - $ref: "#/components/schemas/Result"
      properties:
        attributes:
          $ref: "#/components/schemas/Product"
        relationships:
          $ref: "#/components/schemas/DealsRelationships"
    DealsRelationships:
      type: object
      properties:
        deals:
          type: array
          items:
            $ref: "#/components/schemas/Relationship"
    Product:
      type: object
      properties:
        rid:
          type: string
        quantity:
          type: integer
        originalSupplier:
          type: string
        inventory:
          type: string
        inventoryItemId:
          nullable: true
          type: string
    DealInclude:
      type: object
      allOf:
        - $ref: "#/components/schemas/Include"
      properties:
        attributes:
          $ref: "#/components/schemas/Deal"
    Deal:
      type: object
      required:
        - srOrderNumber
        - srName
        - timeCreated
      properties:
        srOrderNumber:
          type: string
        srName:
          type: string
        timeCreated:
          type: string
          format: date-time
        positions:
          type: array
          items:
            $ref: "#/components/schemas/Position"
    Position:
      type: object
      properties:
        rid:
          type: string
        quantity:
          type: integer


    LocationCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/CollectionResponse'
        #- $ref: "#/components/schemas/PaginatedMetaResponse"
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/LocationResultItem"
    LocationResultItem:
      allOf:
        - $ref: "#/components/schemas/Result"
      properties:
        attributes:
          $ref: "#/components/schemas/Location"
    Location:
      type: object
      required:
        - name
      properties:
        id:
          type: string
        name:
          type: string
        pickupSuppliers:
          nullable: true
          type: array
          items:
            type: string
    StoragesCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/CollectionResponse'
        #- $ref: "#/components/schemas/PaginatedMetaResponse"
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/StorageResultItem"
    StorageResultItem:
      allOf:
        - $ref: "#/components/schemas/Result"
      properties:
        attributes:
          $ref: "#/components/schemas/Storage"
    Storage:
      type: object
      required:
        - name
      properties:
        id:
          type: string
        name:
          type: string
        responsible:
          nullable: false
          type: string
        address:
          nullable: true
          type: string
        supplier:
          type: string
    ReturnPostRequest:
      type: object
      properties:
        storage:
          type: string
        returns:
          type: array
          items:
            $ref: "#/components/schemas/ReturnRequestItem"
    ReturnRequestItem:
      required:
        - rid
        - dealId
        - quantity
        - inventory
      type: object
      properties:
        rid:
          type: string
        dealId:
          type: integer
        quantity:
          type: integer
        inventory:
          type: string
        inventoryItemId:
          type: string
          nullable: true
    ReturnPostResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
      type: object
      properties:
        data:
          type: integer