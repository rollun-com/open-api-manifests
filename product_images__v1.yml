openapi: 3.0.0
info:
  version: "1"
  title: "ProductImages"
  description: "" # todo
servers:
  - url: http://catalog/openapi/ProductImages/v1
  - url: https://rollun.net/api/openapi/ProductImages/v1
tags:
  - name: Images # todo
paths:
  "/images/{rid}":
    put:
      tags:
        - Images
      summary: "" # todo
      parameters:
        - name: rid
          in: path
          required: true
          schema:
            type: string
            minLength: 5
            maxLength: 5
            example: "11111"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagesRequest'
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImagesResponse"
        "500":
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        messages:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Message"
      description: "Message field is not required"
    Message:
      type: object
      properties:
        level:
          type: string
          enum:
            - emergency
            - alert
            - critical
            - error
            - warning
            - notice
            - info
        type:
          type: string
          enum:
            - UNDEFINED
            - INVALID_RESPONSE
          description: >
            UNDEFINED - Any undefined message type
            INVALID_RESPONSE - A message generated by the client stating that the response could not be decoded
        text:
          type: string
          description: Message, that describes what went wrong
    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      type: object
      properties:
        data:
          type: object
    ImagesResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
      properties:
        data:
          type: object
          description: "Record from FeaturedImagesStore for this rid after update"
          additionalProperties: true
    ImagesRequest:
      type: object
      required:
        - images
      properties:
        images:
          type: array
          nullable: false
          description: "Array of images that we want to upload"
          items:
            allOf:
              - $ref: '#/components/schemas/Image'

    ## Resource object
    Image:
      type: object
      description: "At least 1 field MUST be filled. If filled both - priority to binData.
          Tested supported extensions: .jpg, .png
          Potentially supported formats: JPEG, PNG, GIF, BMP, WBMP, GD2, WEBP and AVIF
          Details here: https://www.php.net/manual/en/function.imagecreatefromstring.php"
      properties:
        key:
          type: string
          nullable: true
          description: "(Optional) key defined by client for specific image, that will be return in result to identify this image.
              If omitted - numeric keys will be used."
          example: "64ef9b2b5c12a5"
        url:
          type: string
          description: "Link to image anywhere in the internet that we want to upload to our system"
          example: "https://rollun.s3.eu-central-1.amazonaws.com/images/logo.png"
        binData:
          type: string
          format: byte
          description: "Base64-encoded image data"
          example: "// put here base64-encoded image data"
#          example: "iVBORw0KGgoAAAANSUhEUgAAAMgAAAAoCAYAAAC7HLUcAAAKN2lDQ1BzUkdCIElFQzYxOTY2LTIuMQAAeJydlndUU9kWh8+9N71QkhCKlNBraFICSA29SJEuKjEJEErAkAAiNkRUcERRkaYIMijggKNDkbEiioUBUbHrBBlE1HFwFBuWSWStGd+8ee/Nm98f935rn73P3Wfvfda6AJD8gwXCTFgJgAyhWBTh58WIjYtnYAcBDPAAA2wA4HCzs0IW+EYCmQJ82IxsmRP4F726DiD5+yrTP4zBAP+flLlZIjEAUJiM5/L42VwZF8k4PVecJbdPyZi2NE3OMErOIlmCMlaTc/IsW3z2mWUPOfMyhDwZy3PO4mXw5Nwn4405Er6MkWAZF+cI+LkyviZjg3RJhkDGb+SxGXxONgAoktwu5nNTZGwtY5IoMoIt43kA4EjJX/DSL1jMzxPLD8XOzFouEiSniBkmXFOGjZMTi+HPz03ni8XMMA43jSPiMdiZGVkc4XIAZs/8WRR5bRmyIjvYODk4MG0tbb4o1H9d/JuS93aWXoR/7hlEH/jD9ld+mQ0AsKZltdn6h21pFQBd6wFQu/2HzWAvAIqyvnUOfXEeunxeUsTiLGcrq9zcXEsBn2spL+jv+p8Of0NffM9Svt3v5WF485M4knQxQ143bmZ6pkTEyM7icPkM5p+H+B8H/nUeFhH8JL6IL5RFRMumTCBMlrVbyBOIBZlChkD4n5r4D8P+pNm5lona+BHQllgCpSEaQH4eACgqESAJe2Qr0O99C8ZHA/nNi9GZmJ37z4L+fVe4TP7IFiR/jmNHRDK4ElHO7Jr8WgI0IABFQAPqQBvoAxPABLbAEbgAD+ADAkEoiARxYDHgghSQAUQgFxSAtaAYlIKtYCeoBnWgETSDNnAYdIFj4DQ4By6By2AE3AFSMA6egCnwCsxAEISFyBAVUod0IEPIHLKFWJAb5AMFQxFQHJQIJUNCSAIVQOugUqgcqobqoWboW+godBq6AA1Dt6BRaBL6FXoHIzAJpsFasBFsBbNgTzgIjoQXwcnwMjgfLoK3wJVwA3wQ7oRPw5fgEVgKP4GnEYAQETqiizARFsJGQpF4JAkRIauQEqQCaUDakB6kH7mKSJGnyFsUBkVFMVBMlAvKHxWF4qKWoVahNqOqUQdQnag+1FXUKGoK9RFNRmuizdHO6AB0LDoZnYsuRlegm9Ad6LPoEfQ4+hUGg6FjjDGOGH9MHCYVswKzGbMb0445hRnGjGGmsVisOtYc64oNxXKwYmwxtgp7EHsSewU7jn2DI+J0cLY4X1w8TogrxFXgWnAncFdwE7gZvBLeEO+MD8Xz8MvxZfhGfA9+CD+OnyEoE4wJroRIQiphLaGS0EY4S7hLeEEkEvWITsRwooC4hlhJPEQ8TxwlviVRSGYkNimBJCFtIe0nnSLdIr0gk8lGZA9yPFlM3kJuJp8h3ye/UaAqWCoEKPAUVivUKHQqXFF4pohXNFT0VFysmK9YoXhEcUjxqRJeyUiJrcRRWqVUo3RU6YbStDJV2UY5VDlDebNyi/IF5UcULMWI4kPhUYoo+yhnKGNUhKpPZVO51HXURupZ6jgNQzOmBdBSaaW0b2iDtCkVioqdSrRKnkqNynEVKR2hG9ED6On0Mvph+nX6O1UtVU9Vvuom1TbVK6qv1eaoeajx1UrU2tVG1N6pM9R91NPUt6l3qd/TQGmYaYRr5Grs0Tir8XQObY7LHO6ckjmH59zWhDXNNCM0V2ju0xzQnNbS1vLTytKq0jqj9VSbru2hnaq9Q/uE9qQOVcdNR6CzQ+ekzmOGCsOTkc6oZPQxpnQ1df11Jbr1uoO6M3rGelF6hXrtevf0Cfos/ST9Hfq9+lMGOgYhBgUGrQa3DfGGLMMUw12G/YavjYyNYow2GHUZPTJWMw4wzjduNb5rQjZxN1lm0mByzRRjyjJNM91tetkMNrM3SzGrMRsyh80dzAXmu82HLdAWThZCiwaLG0wS05OZw2xljlrSLYMtCy27LJ9ZGVjFW22z6rf6aG1vnW7daH3HhmITaFNo02Pzq62ZLde2xvbaXPJc37mr53bPfW5nbse322N3055qH2K/wb7X/oODo4PIoc1h0tHAMdGx1vEGi8YKY21mnXdCO3k5rXY65vTW2cFZ7HzY+RcXpkuaS4vLo3nG8/jzGueNueq5clzrXaVuDLdEt71uUnddd457g/sDD30PnkeTx4SnqWeq50HPZ17WXiKvDq/XbGf2SvYpb8Tbz7vEe9CH4hPlU+1z31fPN9m31XfKz95vhd8pf7R/kP82/xsBWgHcgOaAqUDHwJWBfUGkoAVB1UEPgs2CRcE9IXBIYMj2kLvzDecL53eFgtCA0O2h98KMw5aFfR+OCQ8Lrwl/GGETURDRv4C6YMmClgWvIr0iyyLvRJlESaJ6oxWjE6Kbo1/HeMeUx0hjrWJXxl6K04gTxHXHY+Oj45vipxf6LNy5cDzBPqE44foi40V5iy4s1licvvj4EsUlnCVHEtGJMYktie85oZwGzvTSgKW1S6e4bO4u7hOeB28Hb5Lvyi/nTyS5JpUnPUp2Td6ePJninlKR8lTAFlQLnqf6p9alvk4LTduf9ik9Jr09A5eRmHFUSBGmCfsytTPzMoezzLOKs6TLnJftXDYlChI1ZUPZi7K7xTTZz9SAxESyXjKa45ZTk/MmNzr3SJ5ynjBvYLnZ8k3LJ/J9879egVrBXdFboFuwtmB0pefK+lXQqqWrelfrry5aPb7Gb82BtYS1aWt/KLQuLC98uS5mXU+RVtGaorH1futbixWKRcU3NrhsqNuI2ijYOLhp7qaqTR9LeCUXS61LK0rfb+ZuvviVzVeVX33akrRlsMyhbM9WzFbh1uvb3LcdKFcuzy8f2x6yvXMHY0fJjpc7l+y8UGFXUbeLsEuyS1oZXNldZVC1tep9dUr1SI1XTXutZu2m2te7ebuv7PHY01anVVda926vYO/Ner/6zgajhop9mH05+x42Rjf2f836urlJo6m06cN+4X7pgYgDfc2Ozc0tmi1lrXCrpHXyYMLBy994f9Pdxmyrb6e3lx4ChySHHn+b+O31w0GHe4+wjrR9Z/hdbQe1o6QT6lzeOdWV0iXtjusePhp4tLfHpafje8vv9x/TPVZzXOV42QnCiaITn07mn5w+lXXq6enk02O9S3rvnIk9c60vvG/wbNDZ8+d8z53p9+w/ed71/LELzheOXmRd7LrkcKlzwH6g4wf7HzoGHQY7hxyHui87Xe4Znjd84or7ldNXva+euxZw7dLI/JHh61HXb95IuCG9ybv56Fb6ree3c27P3FlzF3235J7SvYr7mvcbfjT9sV3qID0+6j068GDBgztj3LEnP2X/9H686CH5YcWEzkTzI9tHxyZ9Jy8/Xvh4/EnWk5mnxT8r/1z7zOTZd794/DIwFTs1/lz0/NOvm1+ov9j/0u5l73TY9P1XGa9mXpe8UX9z4C3rbf+7mHcTM7nvse8rP5h+6PkY9PHup4xPn34D94Tz+49wZioAAAAJcEhZcwAALiMAAC4jAXilP3YAAAq1SURBVHic7Z0LTFTZGcfva97DOAMM1iKP8QFEQWTXuqJuGnXN1gTaGtNoWdeuFqkmu3HdxDZ1zW6shFRNN7Vp101cbQ21PmKsdRvNhhYtWne7Ckut6wMFBlkGH8DAAPO8c0+/MwLLDHcuM5cLru75JcPM3HPPd8895/zPY+75DtzOnTvPNDQ0FFEURVMyEQTBl5+ff2Lr1q2larXaj48FHjRkuP+y7m+ouyWXohk2fqsIwR+vuqDkd/ri3b+kGBbJTd83gWvXrn1nz5495zmOCzsOZUOZTKb2ioqK+fDuHB5WVVW15tChQx9qNJqwODzPU5mZmVfKy8uXjH/Kv95wo58yOjRNa+rq6l69ffv2+3l5eZ/iY4H6o2uFhzfyaU2CbKsUEnT++uNvaBaW7WetWS1KpPVZBSHEQsU2RB7HAhk4PqIBhDAOh7FsePuFBRIMBvXjl9qnB6UEgguI6ujo+NbQQY8zjWLGaB7sUkJAh9xOK3wjApGPnN6X9NiUQgIZBAvlqy+MUlYRRcse/REIY0JRgRAIzxpEIASCBEQgBIIERCAEggREIASCBEQgBIIERCAEggREIASCBM+EQKqqqkq6u7unMAwT9vQ3GAzS8+fP/0in0/XV1NSsgfC4bUOcQEpKSuPs2bMvmc1ml9S5KOBl+eZ/Lwi0f5HLCH5D1AecSKBp7aQHmsKyP/s/P/4jwWlPpxhO/Mk1XpLGcB7GmnODm/HiZUZtCMR9EwpSX1+/uKGh4QWWZUfkdVpa2o3CwsJzcdpbBPYWiNmbOXPmlYKCgprIOBcvXlx5//79aWLlPWvWrOqMjAw71InXEEJynjDzycnJLbm5uZeSkpI6nwmBnD179ud2uz0/cqGe3++n4GbbEhMTvzxy5MhvVCqVLPt4hQDYub558+af5OXl1Ymdw/c4Ej0nyv7Et3xSRAkCLbn0U+ApxmK7GRLI1co3A3eqF1IqTfTzcTWgGYpOfe6fCWsOvMomZrbLuhEFuHr16vfPnDmzLXKBI87rRYsWnYhXIHV1dcWnT5/+RaQ9n89HFRUV/VZMIBcuXHi9trZ2aWR54jirV69+y2KxnDt27Nh7eB0aLXMVBtho3LRp0/rxFMiErQ9Rq9VenMGRAsGZAy1TEFoaAYfLFQimo6Mj9/Dhw+/v2rXru9Aj+SLDvdV7tvNNNcUxLc4EgdAqrTf0mdP4aLUev48er/WzZZ6Pd5Ybf/zHn8Z9AwoBeRzAeRlZoXFeQ/76lbI3GCYWB67ji1aeEIeHtODyDoJAWLkC6enpmV5ZWfl7pddiBYe+IMQrYzXUiwZHO0vSAkIMXqEaS2bhYZjYUAwXhsPhmNfS0pKdk5NzLcy+t1cbbLpYRKt00RIQEsUQ+HMwoB74rKKC/vC1a9g7QGwtm1pHBe999rLQ3zGJMST3jHoz31Dw0ArKm42lB5Eq787OzhwOG5M5VhsCJwQMejMzM28PXTg5qxYqwUDLKNO8EKCQzvKAMk29JzdtWBx6vb572rRplyN7mEhwZnZ1daW7XK6pkZmGw3CmQ8uCVyyHC4T3GKmA1yJ6n1gcnKaXScy+QTMsVglNCUGaNk0J5RWTPL2e9ThZilWjgfMZwdmShfz9iSNFwlCCt9cU7H1kJgIRB9dlGFG4bTbbJVz2UudCmSKYu6bCK1NMJNgdAOOHyu2h5NViLC4BEvRoxYoVu2Fy1DAYoJn3yjH/vSuFwt3qlZDs6BPWKHZhIisIOkur/qXt2znztztlpC0EVGoVTPau7927d1Es57e1taWVl5dfAiGki2UaZKpIpuMJgvgNIugddCt+9TPtgtKjYuH6H7z3RuQx/41zi/uPl1ZBJmgji4WGCT4jBMjy5ijARF1ltVpbKyoqXozl/IcPHybDsPk8HkJH+sVguLKysjdhgvW2zPSEBGIwGB7CpCbMW43WmtymkkMbg53N78IQwjRQgWL1McAOJjzSJbVzCcl9MtMmi9TU1Faz2fyl0+kUFUi8gJ4E1pr9RTxxVJkLrjN6iwv1d2gpUWdMog+lSElJ6Zg6dWoTCEVcIFht45kANsnmgDfHeF5DacY65ByBwMfncowEjvjATBzio4LHcH19fTrolmT4jI8EehIPDNlCE+qx2oVhHw9zB68S6SIQ5MLt37//w8bGxgVjNQRjfXrLli3r8/Ly/oVb4H379h1tbm6eA4KJ23UTx8c/GcKc5pN169a9PXny5AntgWDIqcW/qYPAw44HAgE8cVOkMSE8HXAej2eqy+WaNlZDA47+Q5sG9Pf3Z4Bd22i/HEUD+7g7HI5sqJDabdu2lUQ+NR1PiouLK0SezNP417r09PTrE5UOwpOH6+zs5JSZjNKU2+0eMgQ2+Wi/MceKVqul7HZ7IdjVG43G/jEnMkaWLFlycqKuRfh6w8HsXSc2e48X3OLDsGQ8nszjBz7PxJIYwtOHIr3HIHIf648C2X6G8MQgLTOBIAERCIEgAREIgSABEQiBIAERCIEgAREIgSABEQiBIAERyETAcPF5V9IM//j/Bz1dYFfXeOMwDDMmb9HxhghknEFIYHjHtXlc2vO3oOIP1HqERYBoThOkeD+LUJD+yscD0b67F+YJ7i4THfUh7tdPPPiBc3t7e3ZXV5fFaDT2Dg8bXOGNPTKHH/d4PIbm5ubnlXxYrTREIIqAhNBaGxFoTk35qnf/wV9b+RbNsMFQ5RaCFGNKvWXccGqN+/TWD/h7/5lPcdjlln7scuty2B57E46sOIhmkcCq0RNcUizaS+BFqa2trS/s2LHjc51Oh53nQorHu52Ulpa+Dr0Lf+DAgQ/UavVgFAQCmdTd3W2LtpkGdsYbjxuIB7zUhI5StoQYoVX6Xkqt66DcKEUkFDut61BXc+5QLj/etCFUx4Wetmzh0Z05lEo7LEqUTRugvjA6UzdntDpHBk4MSUlJrdHqC+4JoMJnOJ3OjMFjWCBer3cSFojD4cgfJpDQ0qRovQe+Br6WwsmPGy4rK+u/N2/enKtEN2exWB4pkKanDlpj9HEzlp72X94/i9bibX8i16TR1Ih/R8cMbGmDN3JgVSPDR4AoFHBTXMbCv9OGJMkN7MaTuXPnVp08ebLb5/OZxVwZIusRXgiL5yb4hT/HsjAW++Ho9XpXQUHBx4olXCZcSUnJroMHD9rsdvtiRqZKBEHgIeM+ArHVKp3AGEHUEx6Ya5ds241c7al8U80PoYcQU0kkaNj7aGlHICA3l/3yOf333n0nBpuxHo87TlpaWvPatWs3nDp16te9vb02Kr5heixlxJvNZvuqVau2Z2Rk3JWwI+depdIlFg9x06dPb9y4ceN6EEl5U1PTHDzkiscyiCMI4ri4YcOGd2DsOdxFthleBpkJHgSnBe8iKDkWhYys1mq1bdA6hZ0XCAQYyGzZWwbFA5tgdRnXVr7W/+mhlcGGf7zEBPqsYnOIECjI0AmTG0PxUnJqqIDHSbHqKPcIh1V6Jztz6Xntc6+coDUG0fMMBkNndnb2ycgWGsqHhrAuOD5iUzecNxDnFAx7wmxCC85MmTLlduT5gyxfvvyvNpvtf3g7V5h3zILeIapIcBkkJCTcx2bxtWC+EbUscUML1721bNmyYzNmzGiIdl5qauolt9uN3bvDbMFwjrVarXeixZOwd7mvr88faQ8n6f+ZrDYEQHcqtgAAAABJRU5ErkJggg=="