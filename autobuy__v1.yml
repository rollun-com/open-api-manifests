openapi: 3.0.0
info:
  version: "1"
  title: "Autobuy"
  description: Manifest description
servers:
  - url: http://supplier/openapi/Autobuy/v1
tags:
  - name: Orders
paths:
  "/orders/actions/create":
    post:
      tags:
        - Orders
      summary: "Create an order"
      description: ""
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderPostRequest'
      responses:
        "200":
          description: "Order successfully created"
          content:
            application/vnd.rollun+json:
              schema:
                $ref: '#/components/schemas/OrderCreationLongTaskResponse'
        "500":
          description: 'Some internal error'
          content:
            application/rollun.problem+json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Orders
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
            example: 'and(eq(field1,value1),eq(field2,value2))'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            example: 20
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            example: 0
        - name: sort
          in: query
          required: false
          schema:
            type: string
            example: -field1
        - name: select
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            example: field1,field2
      responses:
        "200":
          description: Success
          content:
            application/vnd.rollun+json:
              schema:
                $ref: '#/components/schemas/OrderCreationLongTaskListReponse'
  "/orders/actions/create/{id}":
    get:
      tags:
        - Orders
      parameters:
        - in: path
          name: id
          description: Id of task
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/vnd.rollun-long-task+json:
              schema:
                $ref: '#/components/schemas/OrderCreationLongTaskResponse'
        "500":
          description: 'Some internal error'
          content:
            application/rollun.problem+json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    RollunRequest:
      type: object
      properties:
        payload:
          nullable: true
    RollunResponse:
      type: object
      required:
        - data
      properties:
        data:
          nullable: true
        warnings:
          type: array
          items:
            $ref: "#/components/schemas/Warning"
    Error:
      type: object
      required:
        - problem
      properties:
        problem:
          $ref: "#/components/schemas/Problem"
        warnings:
          type: array
          items:
            $ref: "#/components/schemas/Warning"
    Warning:
      type: object
      required:
        - type
        - title
        - detail
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        detail:
          type: string
    Problem:
      description: A Problem Details object (RFC 7807)
      type: object
      required:
        - type
        - title
        - status
        - detail
        - instance
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
          example: Service Unavailable
        status:
          type: integer
          format: int32
          description: HTTP status code
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
        instance:
          type: string
          format: uri
          description: Lifecycle token
          
    OrderCreationLongTaskListReponse:
      allOf:
        - $ref: '#/components/schemas/RollunResponse'
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderCreationLongTask'
          
    OrderCreationLongTaskResponse:
      allOf:
        - $ref: '#/components/schemas/RollunResponse'
      properties:
        data:
          $ref: '#/components/schemas/OrderCreationLongTask'
    
    OrderCreationLongTask:
      type: object
      required: 
        - id
        - status
        - stage
      properties:
        id:
          type: string
          description: Server-generated task id
        status:
          type: string
          enum:
            - pending
            - fulfilled
            - rejected
        stage:
          type: string
          enum:
            - pending
            - fulfilled
            - rejected
        idempotencyKey:
          type: string
        orderId:
          type: string
          description: Order id
        problem:
          $ref: "#/components/schemas/Problem"
          

    ## Body for post request
    OrderPostRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/RollunRequest'
      properties:
        payload:
          $ref: '#/components/schemas/OrderPostPayload'
        
    OrderPostPayload:
      type: object
      required:
        - idempotencyKey
        - supplierCode
        - shippingMethodName
        - items
      properties:
        idempotencyKey:
          type: string
          description: An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you.
        supplierCode:
          type: string
          description: Supplier code
        shippingMethodName:
          type: string
          description: >
            Supplier shipping method name
            Pickup - for pickup of orders. In this case, you do not need to define a recipient, but a warehouse is required for each item.
        receiver:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          description: List of items to order
          items:
            $ref: '#/components/schemas/Item'

    ## Resource objects
    
    Item:
      type: object
      required:
        - rid
        - quantity
      properties:
        rid:
          type: string
          description: Rollun Id
          example: VW6A4
        quantity:
          type: integer
          description: Quantity of products
          example: 2
        warehouse:
          type: string
          nullable: true
          description: >
            The name of the warehouse from where you want to send the goods. Specific for each supplier.
            If no warehouse has been specified, then the supplier can choose the appropriate one, depending on its distance to the client and the availability of items.
            If a warehouse is specified, then the supplier must send from it, or report an error, why he cannot do this
            Required for pickup orders.
            TuckerRocky - ['TX']
            PartsUnlimited - ['NC']
    
    Order:
      type: object
      properties:
        id:
          type: string
          description: >
            Unique identificator of order in format "supplierCode | orderNumber"
          example: "Autodist | AP7734"
        supplierCode:
          type: string
          example: Autodist
          description: Code of supplier (same as id from https://rollun.net/suppliers)
        orderNumber:
          type: string
          example: AP7734
          description: |
            The order number received from the supplier. 
            
            According to it, the order can be found in the user interface on the supplier's website.
        purchaseOrderNumber:
          type: string
          description: Original p.o. number value if supplier has one
          nullable: true
        idempotencyKey:
          type: string
          description: >
            An idempotency key is a unique value generated by the client which the server uses to avoid duplication. How you create unique keys is up to you. Since order can be created manualy in user interface we cannot ensure that this field is unique.
          nullable: true
        associatedOrderNumbers:
          type: array
          items:
            type: string
          nullable: true
          description: >
            It is used when the order is divided into several deals with different numbers. For example, this happens with autodist, when ordered from different warehouses, they create a separate order for each warehouse. We combine such orders into one order, with one of the order numbers in the order_number field, and the rest in the associated_order_numbers.
        paymentCard:
          type: string
          nullable: true
          example: "op acct"
          description: >
            The last 4 digits of the card with which the order was paid. 
            Or the name of the payment method, if it was not paid by a card.
        status:
          type: string
          enum: ['Ordered', 'Back ordered', 'Completed', 'Problem', 'Canceled']
          description: |
            Ordered - The order has been successfully placed with the supplier, but has not yet been completed.
            
            Back ordered - At least one of the ordered items was backordered.
            
            Completed - For orders which was fully complete. All items were sent or picked up and order has invoice.
            
            Problem - The order has at least one problem that is not described in the manifest.
            
            Canceled - Order cancelled. Prices in this status are equal to the values that were actually paid (in most cases, this is zero, but some cancellation penalties can be removed)
        shippingTotalPrice:
          type: number
          nullable: true
          example: 9.45
          description: >
            Full shipping price (including all taxes and additional shipping costs)
            For pickup orders it can be some service charge.
        itemsTotalPrice:
          type: number
          nullable: true
          example: 20.94
          description: Full price of all order items without taxes.
        itemsTax:
          type: number
          nullable: true
          example: 0
          description: The total amount of taxes paid for items
        totalTax:
          type: number
          nullable: true
          example: 0
          description: The total amount of all taxes (including shipping and any additional taxes)
        totalPrice:
          type: number
          nullable: true
          example: 30.39
          description: The total price of the order including taxes and any additional costs
        receiver:
          allOf:
            - $ref: '#/components/schemas/Customer'
          nullable: true
          description: Recipient of the order. (May be null for pickup orders.)
        items:
          type: array
          description: List of purchased items
          items:
            $ref: '#/components/schemas/OrderItem'
        shipments:
          type: array
          nullable: true
          description: |
            Parcels that have been sent, or will be sent (differ in the presence of a track number)
            
            For pikcup orders there also can be some parcels. For example, when a service fee is charged, this can be considered as the price for delivery. Another example when some items have been sent
          items:
            $ref: '#/components/schemas/Shipment'
        messages:
          type: array
          items:
            $ref: "#/components/schemas/OrderMessage"
          description: Messages with warning level (or below)
          default: []
        createRequest:
          type: string
          nullable: true
          example: "{}"
          description: Serialized in json request for creating createOrderTask
        createResponse:
          type: string
          nullable: true
          example: "{}"
          description: Serialized to json the raw data of the supplier response when requesting to create an order.
        originalOrder:
          type: string
          nullable: true
          example: "{}"
          description: Serialized in json last saved raw order data from a supplier.
        checkedAt:
          type: string
          format: date-time
          description: >
            Time in UTC of the last check of the order data.
        createdAt:
          type: string
          format: date-time
          nullable: true
          description: |
            Time in UTC when order was ordered. When the supplier has confirmed that the order has been created.
            
            Examples
              1. The time when we received a successful order creation response from the supplier API.
              2. The time when the parser finished work and successfully created an order on the site.
        updatedAt:
          type: string
          format: date-time
          nullable: true
          description: |
            The time in UTC when the order information was changed in the cache. 
            
            If the order has never changed since the moment it entered the cache, then the time will be null.
            
            Changes in 'messages', 'createRequest', 'createResponse', 'originalOrder', 'updatedAt', 'checkedAt', 'cachedAt' field do not update 'updatedAt'.
            
            Comparison of arrays (fields 'item', 'shipment' e.t.c) is order dependent. ['a', 'b'] and ['b', 'a'] is different arrays.

    OrderMessage:
      type: object
      properties:
        level:
          type: string
          enum:
            - warning
            - notice
            - info
        type:
          type: string
          enum:
            - UNDEFINED
            - RID_BY_CSN_NOT_FOUND
            - IDEMPOTENCY_KEY_PROBLEM
            - UNPARSED_ADDRESS_FIELD
            - PRICES_MISMATCH
            - RECEIVER_MISMATCH
            - SHIPPING_METHOD_MISMATCH
            - SUPPLIER_MISMATCH
            - ITEMS_MISMATCH
          description: >
            If you add a new type to this manifest, then also add it to the SuppliersOrders manifest.
            
            UNDEFINED - Any undefined message type
            IDEMPOTENCY_KEY_PROBLEM - The idempotency key cannot be uniquely identified for an order.
            UNPARSED_ADDRESS_FIELD - Unable to parse one of the address fields. This field will contain an empty string.
            PRICES_MISMATCH - sum of prices parts ("shippingTotalPrice", "itemsTotalPrice", itemsTax" and "totalTax") not equals to totalPrice
            RECEIVER_MISMATCH - Actual receiver is different from the requested.
            SHIPPING_METHOD_MISMATCH - Actual shipping method is different from the requested
            SUPPLIER_MISMATCH - Actual supplier is different from the requested
            ITEMS_MISMATCH - Actual items is different from the requested
        text:
          type: string
          description: Message, that describes what went wrong

    Shipment:
      type: object
      properties:
        trackNumber:
          type: string
          description: The tracking code provided by the carrier (if order items has sended)
          example: '9400100000000000000000'
          nullable: true
        shippingMethodName:
          type: string
          example: USPS Priority
          description: Name of shipping method (same as name in shippingMethod)
        shippingPrice:
          type: number
          description: "Total price of this shipment"
          example: 9.45
          nullable: true
        carrierCode:
          type: string
          description: The name of the carrier handling the shipment

    OrderItem:
      type: object
      properties:
        rid:
          type: string
          description: >
            Rid, which corresponded to csn at the time of order creation. 
            May be null if csn to rid match not found. in this case in messages will be warning message with type RID_BY_CSN_NOT_FOUND.
          example: VW6A4
          nullable: true
        csn:
          type: string
          description: Supplier internal item identifier
        qtyOrdered:
          type: integer
          description: >
            The number of items that the supplier accepted (The total quantity, including those goods that are in the backorder).
            
            In some cases, it may differ from the quantity we tried to order. For example, when, when creating a pick-up order, the full quantity was not available and we order the quantity that is.
        qtyShipped:
          type: integer
          description: >
            Depends on order status
              If the status is "Tracknumber received" or "Picked up", then the number of items that have been actually shipped or picked up,
              If the status is not "sent", then the number of items that are intending to be sent
          nullable: true
        qtyBackOrdered:
          type: integer
          description: The number of items that have been backordered.
          nullable: true
        unitPrice:
          type: number
          example: 10.47
          description: price for one unit of item
          nullable: true
        trackNumbers:
          type: array
          nullable: true
          description: The tracking code of the shipment this item is in. Can be null if it is impossible to match items to shipments.
          items:
            type: string
            example: '9400100000000000000000'
        warehouse:
          type: string
          description: Original warehouse field from supplier (if available)
          nullable: true

    Customer:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
          description: Full name
          example: Shawn Weisweaver
        phone:
          type: string
          nullable: true
          description: Phone number to reach the person
          example: "415-123-4567"
        email:
          type: string
          nullable: true
          description: Email address to reach the person
          example: "test@mail.loc"
        address:
          $ref: "#/components/schemas/Address"

    Address:
      type: object
      required:
        - country
        - state
        - city
        - postalCode
        - address1
      properties:
        country:
          type: string
          description: "Country code"
        state:
          type: string
          description: US state code
          example: CA
        city:
          type: string
          description: Full city name
          example: San Francisco
        postalCode:
          type: string
          description: ZIP or postal code
          example: "94104"
        address1:
          type: string
          description: First line of the address
          example: "417 Montgomery St"
        address2:
          type: string
          nullable: true
          description: Second line of the address
          example: "Floor 5"